
@inject HttpClient httpClient;
@inject ISnackbar Snackbar;
@using MudBlazorWASM.Client.Components.GradesCmpts
@using MudBlazorWASM.Shared.Models

<h1>e-Grades</h1>

<MudTable HorizontalScrollbar="true" Height="600px" Breakpoint="Breakpoint.Sm" FixedHeader="true" Items="@Elements" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<SummaryGrade,bool>(FilterFunc1)" 
          @bind-SelectedItem="selectedItem1" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Student grades successfully updated"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch">
    <ToolBarContent>
        <MudText Typo="Typo.caption">Updates as of @DateTime.Now</MudText>
        <MudSpacer />
        <MudText Typo="Typo.caption" Class="align-self-center">Selected Item(s): @selectedItem1?.Last, @selectedItem1?.First - @selectedItem1?.Studno</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Variant="Variant.Outlined" Label="Search OfferNo, StudentNo, Lastname or Firstname" Placeholder="Search keyword..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SummaryGrade, object>(x=>x.Id)">No.</MudTableSortLabel></MudTh>
        <MudTh>Offer#</MudTh>
        <MudTh>Code</MudTh>
        <MudTh>Subject</MudTh>
        <MudTh>StudentID</MudTh>
        <MudTh>Lastname</MudTh>
        <MudTh>Firstname</MudTh>
        <MudTh>PRE</MudTh>
        <MudTh>MID</MudTh>
        <MudTh>SEMI</MudTh>
        <MudTh>FINAL</MudTh>
        <MudTh>AVE</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="No.">@context.Id</MudTd>
        <MudTd DataLabel="Offer #">@context.Offerno</MudTd>
        <MudTd DataLabel="Course #">@context.Courseno</MudTd>
        <MudTd DataLabel="Subject">@context.Subjects</MudTd>
        <MudTd DataLabel="Student ID">@context.Studno</MudTd>
        <MudTd DataLabel="Lastname">@context.Last</MudTd>
        <MudTd DataLabel="Firstname">@context.First</MudTd>
        <MudTd DataLabel="PRELIM">@context.Term1</MudTd>
        <MudTd DataLabel="MIDTERM">@context.Term2</MudTd>
        <MudTd DataLabel="SEMI">@context.Term3</MudTd>
        <MudTd DataLabel="FINAL">@context.Term4</MudTd>
        <MudTd DataLabel="AVERAGE">@context.Average</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.Offerno</MudTd>
        <MudTd>@context.Courseno</MudTd>
        <MudTd>@context.Studno</MudTd>
        <MudTd>@context.Last</MudTd>
        <MudTd>@context.First</MudTd>
        <MudTd>@context.Mi</MudTd>
        <MudTd DataLabel="PRELIM">
           <MudTextField @bind-Value="@context.Term1" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Term2" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Term3" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Term4" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Average" Required />
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
@*   <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>*@
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected Item(s): @selectedItem1?.Last, @selectedItem1?.First</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = false;
    private bool ronly = false;
    private string searchString1 = "";
    private SummaryGrade selectedItem1 = null!;
    private HashSet<SummaryGrade> selectedItems = new HashSet<SummaryGrade>();
    private List<string> _events = new();
    private SummaryGrade? elementBeforeEdit;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private double ComputedFinalGrades;

    private IEnumerable<SummaryGrade> Elements = new List<SummaryGrade>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<SummaryGrade>>("api/grades/GetAllGrades");        
        dense = true;
        hover = true;

    }

    private bool FilterFunc1(SummaryGrade element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SummaryGrade element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Last.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.First.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Offerno} {element.Id} {element.Average}".Contains(searchString))
            return true;
        return false;
    }

    private void ClearEventLog()
    {
        _events.Clear();
    }

    private void AddEditionEvent(string message)
    {
        _events.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            Term1 = ((SummaryGrade)element).Term1,
            Term2 = ((SummaryGrade)element).Term2,
            Term3 = ((SummaryGrade)element).Term3,
            Term4 = ((SummaryGrade)element).Term4,
            Average = ((SummaryGrade)element).Average
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((SummaryGrade)element).Studno}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((SummaryGrade)element).Studno} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((SummaryGrade)element).Term1 = elementBeforeEdit?.Term1;
        ((SummaryGrade)element).Term2 = elementBeforeEdit?.Term2;
        ((SummaryGrade)element).Term3 = elementBeforeEdit?.Term3;
        ((SummaryGrade)element).Term4 = elementBeforeEdit?.Term4;
        ((SummaryGrade)element).Average = elementBeforeEdit?.Average;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((SummaryGrade)element).Studno} cancelled");
    }

}